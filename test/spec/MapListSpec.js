// Generated by CoffeeScript 1.6.2
(function() {
  var log,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  log = function() {
    return console.log.apply(console, arguments);
  };

  describe("MapList", function() {
    var createSpy, createSpyObj, data;

    data = createSpy = createSpyObj = void 0;
    beforeEach(function() {
      createSpy = jasmine.createSpy;
      createSpyObj = jasmine.createSpyObj;
      return data = {
        entries: {
          object: [
            {
              "states": "北海道",
              "capitals": "札幌市",
              "lat": "43.0646147",
              "lng": "141.3468074",
              "genre": "北海道"
            }, {
              "states": "青森県",
              "capitals": "青森市",
              "lat": "41.8243077",
              "lng": "140.7399984",
              "genre": "東北"
            }, {
              "states": "岩手県",
              "capitals": "盛岡市",
              "lat": "39.7036194",
              "lng": "141.1526839",
              "genre": "東北"
            }, {
              "states": "宮城県",
              "capitals": "仙台市",
              "lat": "38.2688373",
              "lng": "140.8721000",
              "genre": "東北"
            }, {
              "states": "秋田県",
              "capitals": "秋田市",
              "lat": "39.7186135",
              "lng": "140.1023643",
              "genre": "東北"
            }, {
              "states": "山形県",
              "capitals": "山形市",
              "lat": "38.2404355",
              "lng": "140.3636333",
              "genre": "東北"
            }, {
              "states": "福島県",
              "capitals": "福島市",
              "lat": "37.7502986",
              "lng": "140.4675514",
              "genre": "東北"
            }, {
              "states": "茨城県",
              "capitals": "水戸市",
              "lat": "36.3418112",
              "lng": "140.4467935",
              "genre": "関東"
            }, {
              "states": "栃木県",
              "capitals": "宇都宮市",
              "lat": "36.5657250",
              "lng": "139.8835651",
              "genre": "関東"
            }, {
              "states": "群馬県",
              "capitals": "前橋市",
              "lat": "36.3906675",
              "lng": "139.0604061",
              "genre": "関東"
            }, {
              "states": "埼玉県",
              "capitals": "さいたま市",
              "lat": "35.8569991",
              "lng": "139.6488487",
              "genre": "関東"
            }, {
              "states": "千葉県",
              "capitals": "千葉市",
              "lat": "35.6050574",
              "lng": "140.1233063",
              "genre": "関東"
            }, {
              "states": "東京都",
              "capitals": "新宿区",
              "lat": "35.6894875",
              "lng": "139.6917064",
              "genre": "関東"
            }, {
              "states": "神奈川県",
              "capitals": "横浜市",
              "lat": "35.4475073",
              "lng": "139.6423446",
              "genre": "関東"
            }, {
              "states": "山梨県",
              "capitals": "甲府市",
              "lat": "35.6641575",
              "lng": "138.5684486",
              "genre": "関東"
            }, {
              "states": "新潟県",
              "capitals": "新潟市",
              "lat": "37.9025518",
              "lng": "139.0230946",
              "genre": "信越"
            }, {
              "states": "長野県",
              "capitals": "長野市",
              "lat": "36.6512986",
              "lng": "138.1809557",
              "genre": "信越"
            }, {
              "states": "富山県",
              "capitals": "富山市",
              "lat": "36.6952907",
              "lng": "137.2113383",
              "genre": "北陸"
            }, {
              "states": "石川県",
              "capitals": "金沢市",
              "lat": "36.5946816",
              "lng": "136.6255726",
              "genre": "北陸"
            }, {
              "states": "福井県",
              "capitals": "福井市",
              "lat": "36.0651779",
              "lng": "136.2215269",
              "genre": "北陸"
            }, {
              "states": "岐阜県",
              "capitals": "岐阜市",
              "lat": "35.3912272",
              "lng": "136.7222906",
              "genre": "東海"
            }, {
              "states": "静岡県",
              "capitals": "静岡市",
              "lat": "34.9771201",
              "lng": "138.3830845",
              "genre": "東海"
            }, {
              "states": "愛知県",
              "capitals": "名古屋市",
              "lat": "35.1801883",
              "lng": "136.9065647",
              "genre": "東海"
            }, {
              "states": "三重県",
              "capitals": "津市",
              "lat": "34.7302829",
              "lng": "136.5085883",
              "genre": "東海"
            }, {
              "states": "滋賀県",
              "capitals": "大津市",
              "lat": "35.0045306",
              "lng": "135.8685899",
              "genre": "近畿"
            }, {
              "states": "京都府",
              "capitals": "京都市",
              "lat": "35.0212466",
              "lng": "135.7555968",
              "genre": "近畿"
            }, {
              "states": "大阪府",
              "capitals": "大阪市",
              "lat": "34.6862971",
              "lng": "135.5196609",
              "genre": "近畿"
            }, {
              "states": "兵庫県",
              "capitals": "神戸市",
              "lat": "34.6912688",
              "lng": "135.1830706",
              "genre": "近畿"
            }, {
              "states": "奈良県",
              "capitals": "奈良市",
              "lat": "34.6853345",
              "lng": "135.8327421",
              "genre": "近畿"
            }, {
              "states": "和歌山県",
              "capitals": "和歌山市",
              "lat": "34.2259867",
              "lng": "135.1675086",
              "genre": "近畿"
            }, {
              "states": "鳥取県",
              "capitals": "鳥取市",
              "lat": "35.5038906",
              "lng": "134.2377356",
              "genre": "中国"
            }, {
              "states": "島根県",
              "capitals": "松江市",
              "lat": "35.4722952",
              "lng": "133.0504997",
              "genre": "中国"
            }, {
              "states": "岡山県",
              "capitals": "岡山市",
              "lat": "34.6617511",
              "lng": "133.9344057",
              "genre": "中国"
            }, {
              "states": "広島県",
              "capitals": "広島市",
              "lat": "34.3965603",
              "lng": "132.4596225",
              "genre": "中国"
            }, {
              "states": "山口県",
              "capitals": "山口市",
              "lat": "34.1859563",
              "lng": "131.4706493",
              "genre": "中国"
            }, {
              "states": "徳島県",
              "capitals": "徳島市",
              "lat": "34.0657179",
              "lng": "134.5593601",
              "genre": "四国"
            }, {
              "states": "香川県",
              "capitals": "高松市",
              "lat": "34.3401491",
              "lng": "134.0434436",
              "genre": "四国"
            }, {
              "states": "愛媛県",
              "capitals": "松山市",
              "lat": "33.8416238",
              "lng": "132.7656808",
              "genre": "四国"
            }, {
              "states": "高知県",
              "capitals": "高知市",
              "lat": "33.5597062",
              "lng": "133.5310786",
              "genre": "四国"
            }, {
              "states": "福岡県",
              "capitals": "福岡市",
              "lat": "33.6065756",
              "lng": "130.4182970",
              "genre": "九州"
            }, {
              "states": "佐賀県",
              "capitals": "佐賀市",
              "lat": "33.2494416",
              "lng": "130.2997942",
              "genre": "九州"
            }, {
              "states": "長崎県",
              "capitals": "長崎市",
              "lat": "32.7448388",
              "lng": "129.8737562",
              "genre": "九州"
            }, {
              "states": "熊本県",
              "capitals": "熊本市",
              "lat": "32.7898270",
              "lng": "130.7416672",
              "genre": "九州"
            }, {
              "states": "大分県",
              "capitals": "大分市",
              "lat": "33.2381718",
              "lng": "131.6126189",
              "genre": "九州"
            }, {
              "states": "宮崎県",
              "capitals": "宮崎市",
              "lat": "31.9110956",
              "lng": "131.4238934",
              "genre": "九州"
            }, {
              "states": "鹿児島県",
              "capitals": "鹿児島市",
              "lat": "31.5610825",
              "lng": "130.5577279",
              "genre": "九州"
            }, {
              "states": "沖縄県",
              "capitals": "那覇市",
              "lat": "26.2124013",
              "lng": "127.6809317",
              "genre": "沖縄"
            }
          ],
          xml: $.parseXML("<?xml version='1.0' encoding='UTF-8'?>\n<places>\n<genre id='北海道'><place latitude='43.0646147' longitude='141.3468074'><states>北海道</states><capitals>札幌市</capitals></place></genre>\n<genre id='東北'><place latitude='41.8243077' longitude='140.7399984'><states>青森県</states><capitals>青森市</capitals></place><place latitude='39.7036194' longitude='141.1526839'><states>岩手県</states><capitals>盛岡市</capitals></place><place latitude='38.2688373' longitude='140.8721000'><states>宮城県</states><capitals>仙台市</capitals></place><place latitude='39.7186135' longitude='140.1023643'><states>秋田県</states><capitals>秋田市</capitals></place><place latitude='38.2404355' longitude='140.3636333'><states>山形県</states><capitals>山形市</capitals></place><place latitude='37.7502986' longitude='140.4675514'><states>福島県</states><capitals>福島市</capitals></place></genre>\n<genre id='関東'><place latitude='36.3418112' longitude='140.4467935'><states>茨城県</states><capitals>水戸市</capitals></place><place latitude='36.5657250' longitude='139.8835651'><states>栃木県</states><capitals>宇都宮市</capitals></place><place latitude='36.3906675' longitude='139.0604061'><states>群馬県</states><capitals>前橋市</capitals></place><place latitude='35.8569991' longitude='139.6488487'><states>埼玉県</states><capitals>さいたま市</capitals></place><place latitude='35.6050574' longitude='140.1233063'><states>千葉県</states><capitals>千葉市</capitals></place><place latitude='35.6894875' longitude='139.6917064'><states>東京都</states><capitals>新宿区</capitals></place><place latitude='35.4475073' longitude='139.6423446'><states>神奈川県</states><capitals>横浜市</capitals></place><place latitude='35.6641575' longitude='138.5684486'><states>山梨県</states><capitals>甲府市</capitals></place></genre>\n<genre id='信越'><place latitude='37.9025518' longitude='139.0230946'><states>新潟県</states><capitals>新潟市</capitals></place><place latitude='36.6512986' longitude='138.1809557'><states>長野県</states><capitals>長野市</capitals></place></genre>\n<genre id='北陸'><place latitude='36.6952907' longitude='137.2113383'><states>富山県</states><capitals>富山市</capitals></place><place latitude='36.5946816' longitude='136.6255726'><states>石川県</states><capitals>金沢市</capitals></place><place latitude='36.0651779' longitude='136.2215269'><states>福井県</states><capitals>福井市</capitals></place></genre>\n<genre id='東海'><place latitude='35.3912272' longitude='136.7222906'><states>岐阜県</states><capitals>岐阜市</capitals></place><place latitude='34.9771201' longitude='138.3830845'><states>静岡県</states><capitals>静岡市</capitals></place><place latitude='35.1801883' longitude='136.9065647'><states>愛知県</states><capitals>名古屋市</capitals></place><place latitude='34.7302829' longitude='136.5085883'><states>三重県</states><capitals>津市</capitals></place></genre>\n<genre id='近畿'><place latitude='35.0045306' longitude='135.8685899'><states>滋賀県</states><capitals>大津市</capitals></place><place latitude='35.0212466' longitude='135.7555968'><states>京都府</states><capitals>京都市</capitals></place><place latitude='34.6862971' longitude='135.5196609'><states>大阪府</states><capitals>大阪市</capitals></place><place latitude='34.6912688' longitude='135.1830706'><states>兵庫県</states><capitals>神戸市</capitals></place><place latitude='34.6853345' longitude='135.8327421'><states>奈良県</states><capitals>奈良市</capitals></place><place latitude='34.2259867' longitude='135.1675086'><states>和歌山県</states><capitals>和歌山市</capitals></place></genre>\n<genre id='中国'><place latitude='35.5038906' longitude='134.2377356'><states>鳥取県</states><capitals>鳥取市</capitals></place><place latitude='35.4722952' longitude='133.0504997'><states>島根県</states><capitals>松江市</capitals></place><place latitude='34.6617511' longitude='133.9344057'><states>岡山県</states><capitals>岡山市</capitals></place><place latitude='34.3965603' longitude='132.4596225'><states>広島県</states><capitals>広島市</capitals></place><place latitude='34.1859563' longitude='131.4706493'><states>山口県</states><capitals>山口市</capitals></place></genre>\n<genre id='四国'><place latitude='34.0657179' longitude='134.5593601'><states>徳島県</states><capitals>徳島市</capitals></place><place latitude='34.3401491' longitude='134.0434436'><states>香川県</states><capitals>高松市</capitals></place><place latitude='33.8416238' longitude='132.7656808'><states>愛媛県</states><capitals>松山市</capitals></place><place latitude='33.5597062' longitude='133.5310786'><states>高知県</states><capitals>高知市</capitals></place></genre>\n<genre id='九州'><place latitude='33.6065756' longitude='130.4182970'><states>福岡県</states><capitals>福岡市</capitals></place><place latitude='33.2494416' longitude='130.2997942'><states>佐賀県</states><capitals>佐賀市</capitals></place><place latitude='32.7448388' longitude='129.8737562'><states>長崎県</states><capitals>長崎市</capitals></place><place latitude='32.7898270' longitude='130.7416672'><states>熊本県</states><capitals>熊本市</capitals></place><place latitude='33.2381718' longitude='131.6126189'><states>大分県</states><capitals>大分市</capitals></place><place latitude='31.9110956' longitude='131.4238934'><states>宮崎県</states><capitals>宮崎市</capitals></place><place latitude='31.5610825' longitude='130.5577279'><states>鹿児島県</states><capitals>鹿児島市</capitals></place></genre>\n<genre id='沖縄'><place latitude='26.2124013' longitude='127.6809317'><states>沖縄県</states><capitals>那覇市</capitals></place></genre>\n</places>")
        },
        matcher: {
          toDeepEqual: function(expected) {
            return _.isEqual(this.actual, expected);
          }
        }
      };
    });
    describe("= APP", function() {
      var app, maplistArgs;

      app = maplistArgs = void 0;
      beforeEach(function() {
        return maplistArgs = {
          data: data.entries.object
        };
      });
      describe("constructor", function() {
        var delegateEvents, options, rebuild;

        options = delegateEvents = rebuild = void 0;
        beforeEach(function() {
          var MyMapList, _ref;

          options = MapList.prototype.makeOptions();
          delegateEvents = createSpy("delegateEvents");
          rebuild = createSpy("rebuild");
          MyMapList = (function(_super) {
            __extends(MyMapList, _super);

            function MyMapList() {
              _ref = MyMapList.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            MyMapList.prototype.makeOptions = createSpy("makeOptions").andReturn(options);

            MyMapList.prototype.delegateEvents = delegateEvents;

            MyMapList.prototype.rebuild = rebuild;

            return MyMapList;

          })(MapList);
          return app = new MyMapList({
            data: data.entries.object
          });
        });
        it("check options", function() {
          return expect(app.options).toBe(options);
        });
        it("check mapView", function() {
          return expect(app.mapView instanceof MapList.MapView).toBeTruthy();
        });
        it("check listView", function() {
          return expect(app.listView instanceof MapList.ListView).toBeTruthy();
        });
        it("check genresView", function() {
          return expect(app.genresView instanceof MapList.GenresView).toBeTruthy();
        });
        it("check entries", function() {
          return expect(app.entries instanceof MapList.Entries).toBeTruthy();
        });
        it("called delegateEvents", function() {
          return expect(delegateEvents).toHaveBeenCalled();
        });
        it("called rebuild", function() {
          return expect(rebuild).toHaveBeenCalled();
        });
        return it("called rebuild with firstGenre", function() {
          return expect(rebuild.calls[0].args[0]).toBe(app.options.firstGenre);
        });
      });
      describe("::makeOptions", function() {
        beforeEach(function() {
          app = new MapList(maplistArgs);
          spyOn(app, "extendDefaultOptions").andCallThrough();
          return app.extendOptions = createSpy("extendOptions");
        });
        it("call @extendDefaultOptions", function() {
          app.makeOptions({});
          return expect(app.extendDefaultOptions).toHaveBeenCalled();
        });
        it("call @extendOptions", function() {
          app.makeOptions({});
          return expect(app.extendOptions).toHaveBeenCalled();
        });
        return it("compose extendDefaultOptions and extendOptions", function() {
          var obj;

          obj = app.extendDefaultOptions();
          app.extendDefaultOptions = createSpy("extendDefaultOptions").andReturn(obj);
          app.makeOptions({});
          return expect(app.extendOptions.calls[0].args[0]).toBe(obj);
        });
      });
      describe("::extendDefaultOptions", function() {
        var defaultData;

        defaultData = void 0;
        beforeEach(function() {
          return defaultData = _(app).result('default');
        });
        it("return default value without arguments", function() {
          return expect(app.extendDefaultOptions()).toEqual(defaultData);
        });
        it("return default value with {}", function() {
          return expect(app.extendDefaultOptions({})).toEqual(defaultData);
        });
        it("return value is not default", function() {
          return expect(app.extendDefaultOptions()).not.toBe(defaultData);
        });
        return it("return value default + options", function() {
          var answer, options;

          options = {
            lat: 0,
            lng: 0
          };
          answer = _.extend({}, defaultData, options);
          return expect(app.extendDefaultOptions(options)).toEqual(answer);
        });
      });
      describe("::extendOptions", function() {
        var options, res;

        options = res = void 0;
        beforeEach(function() {
          options = {
            lat: 35,
            lng: 135,
            templateEngine: _.template,
            infoTemplate: "infoTemplate",
            listTemplate: "listTemplate"
          };
          return res = MapList.prototype.extendOptions(options);
        });
        it("return value is not options", function() {
          return expect(res).not.toEqual(options);
        });
        it("has center object", function() {
          return expect(res.center instanceof google.maps.LatLng).toBeTruthy();
        });
        it("check lat", function() {
          return expect(res.center.lat()).toBe(options.lat);
        });
        it("check lng", function() {
          return expect(res.center.lng()).toBe(options.lng);
        });
        it("has infoHtmlFactory object", function() {
          return expect(res.infoHtmlFactory instanceof MapList.HtmlFactory).toBeTruthy();
        });
        it("check infoHtmlFactory.templateEngine", function() {
          return expect(res.infoHtmlFactory.templateEngine).toBe(options.templateEngine);
        });
        it("check infoHtmlFactory.template", function() {
          return expect(res.infoHtmlFactory.template).toBe(options.infoTemplate);
        });
        it("has listHtmlFactory object", function() {
          return expect(res.listHtmlFactory instanceof MapList.HtmlFactory).toBeTruthy();
        });
        it("check listHtmlFactory.templateEngine", function() {
          return expect(res.listHtmlFactory.templateEngine).toBe(options.templateEngine);
        });
        return it("check listHtmlFactory.template", function() {
          return expect(res.listHtmlFactory.template).toBe(options.listTemplate);
        });
      });
      describe("::delegateEvents", function() {
        var method, obj, obj2;

        method = obj = obj2 = void 0;
        beforeEach(function() {
          app = new MapList(maplistArgs);
          app.entries.off();
          app.mapView.off();
          app.genresView.off();
          _.extend(app, {
            build: createSpy("build"),
            clear: createSpy("clear"),
            openInfo: createSpy("openInfo"),
            openedInfo: createSpy("openedInfo"),
            closeInfo: createSpy("closeInfo"),
            changeGenre: createSpy("changeGenre")
          });
          return app.delegateEvents();
        });
        describe("on select event", function() {
          beforeEach(function() {
            method = app.build;
            obj = [];
            return app.entries.trigger("select", obj);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          return it("catch args", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
        });
        describe("on unselect event", function() {
          beforeEach(function() {
            method = app.clear;
            obj = [];
            return app.entries.trigger("unselect", obj);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          return it("catch args", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
        });
        describe("on openinfo event", function() {
          beforeEach(function() {
            method = app.openInfo;
            obj = [];
            return app.entries.trigger("openinfo", obj);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          return it("catch args", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
        });
        describe("on openedInfo event", function() {
          beforeEach(function() {
            method = app.openedInfo;
            obj = [];
            obj2 = {};
            return app.mapView.trigger("openedInfo", obj, obj2);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          it("catch args[0]", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
          return it("catch args[1]", function() {
            return expect(method.calls[0].args[1]).toBe(obj2);
          });
        });
        describe("on closeinfo event", function() {
          beforeEach(function() {
            method = app.closeInfo;
            obj = [];
            return app.entries.trigger("closeinfo", obj);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          return it("catch args", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
        });
        return describe("on change:genre event", function() {
          beforeEach(function() {
            method = app.changeGenre;
            obj = [];
            return app.genresView.trigger("change:genre", obj);
          });
          it("called", function() {
            return expect(method).toHaveBeenCalled();
          });
          return it("catch args", function() {
            return expect(method.calls[0].args[0]).toBe(obj);
          });
        });
      });
      describe("eventMethods", function() {
        beforeEach(function() {
          return app = new MapList(maplistArgs);
        });
        /*
        describe ".entries_select",->
          entries = spy1 = spy2= undefined
          beforeEach ->
            app.mapView  = { build : spy1 = createSpy("mapView:build") }
            app.listView = { build : spy2 = createSpy("listView:build") }
            app.entries_select(entries = [])
        
          it "call mapView.build",->
            expect(spy1).toHaveBeenCalled()
        
          it "call mapView.build with entries",->
            expect(spy1.calls[0].args[0]).toBe(entries)
        
          it "call mapView.build",->
            expect(spy2).toHaveBeenCalled()
        
          it "call mapView.build with entries",->
            expect(spy2.calls[0].args[0]).toBe(entries)
        
        describe ".entries_unselect",->
          spy1 = spy2 = entries = undefined
          beforeEach ->
            method = app.entries_unselect
            app.mapView  = { clear : spy1 = createSpy("mapView:clear") }
            app.listView = { clear : spy2 = createSpy("listView:clear") }
            method(entries = [])
        
          it "call mapView.build",->
            expect(spy1).toHaveBeenCalled()
        
          it "call mapView.build with entries",->
            expect(spy1.calls[0].args[0]).toBe(entries)
        
          it "call mapView.build",->
            expect(spy2).toHaveBeenCalled()
        
          it "call mapView.build with entries",->
            expect(spy2.calls[0].args[0]).toBe(entries)
        */

        describe(".openInfo", function() {
          var entry, spy1;

          spy1 = entry = void 0;
          beforeEach(function() {
            var method;

            method = app.openInfo;
            app.mapView = {
              openInfo: spy1 = createSpy("mapView:openInfo")
            };
            entry = {
              info: "info",
              marker: "marker"
            };
            return method(entry);
          });
          it("call mapView.build", function() {
            return expect(spy1).toHaveBeenCalled();
          });
          it("call mapView.build with args1", function() {
            return expect(spy1.calls[0].args[0]).toBe(entry.info);
          });
          return it("call mapView.build with args2", function() {
            return expect(spy1.calls[0].args[1]).toBe(entry.marker);
          });
        });
        describe(".openedInfo", function() {});
        describe(".closeInfo", function() {
          var entry, spy1;

          spy1 = entry = void 0;
          beforeEach(function() {
            app.mapView = {
              closeOpenedInfo: spy1 = createSpy("mapView:openInfo")
            };
            entry = {};
            return app.closeInfo(entry);
          });
          return it("call mapView.build", function() {
            return expect(spy1).toHaveBeenCalled();
          });
        });
        return describe(".changeGenre", function() {
          var genreId, spy1;

          spy1 = genreId = void 0;
          beforeEach(function() {
            app.rebuild = spy1 = createSpy("mapView:openInfo");
            genreId = "foo";
            return app.changeGenre(genreId);
          });
          it("call mapView.build", function() {
            return expect(spy1).toHaveBeenCalled();
          });
          return it("call mapView.build with entries", function() {
            return expect(spy1.calls[0].args[0]).toBe(genreId);
          });
        });
      });
      describe("::build", function() {
        var entries, spy1, spy2;

        entries = spy1 = spy2 = void 0;
        beforeEach(function() {
          app = new MapList(maplistArgs);
          app.mapView = {
            build: spy1 = createSpy("mapView:build")
          };
          app.listView = {
            build: spy2 = createSpy("listView:build")
          };
          return app.build(entries = {});
        });
        it("call mapView.build", function() {
          return expect(spy1).toHaveBeenCalled();
        });
        it("call mapView.build with entries", function() {
          return expect(spy1.calls[0].args[0]).toBe(entries);
        });
        it("call mapView.build", function() {
          return expect(spy2).toHaveBeenCalled();
        });
        return it("call mapView.build with entries", function() {
          return expect(spy2.calls[0].args[0]).toBe(entries);
        });
      });
      describe("::clear", function() {
        var entries, spy1, spy2;

        entries = spy1 = spy2 = void 0;
        beforeEach(function() {
          app = new MapList(maplistArgs);
          app.mapView = {
            clear: spy1 = createSpy("mapView:clear")
          };
          app.listView = {
            clear: spy2 = createSpy("listView:clear")
          };
          return app.clear();
        });
        it("call mapView.clear", function() {
          return expect(spy1).toHaveBeenCalled();
        });
        return it("call mapView.clear", function() {
          return expect(spy2).toHaveBeenCalled();
        });
      });
      describe("rebuild", function() {
        var genreId;

        genreId = void 0;
        beforeEach(function() {
          app = new MapList(maplistArgs);
          app.entries = {
            unselect: createSpy("unselect"),
            select: createSpy("select")
          };
          genreId = "__all__";
          return app.rebuild(genreId);
        });
        it("call unselect", function() {
          return expect(app.entries.unselect).toHaveBeenCalled();
        });
        it("call select", function() {
          return expect(app.entries.select).toHaveBeenCalled();
        });
        return it("call select with genreId", function() {
          return expect(app.entries.select.calls[0].args[0]).toBe(genreId);
        });
      });
      return describe("getMap", function() {
        beforeEach(function() {
          return app = new MapList(maplistArgs);
        });
        return it("return map", function() {
          return expect(app.getMap()).toBe(app.mapView.map);
        });
      });
    });
    describe(".Parser", function() {
      var Parser;

      Parser = void 0;
      beforeEach(function() {
        return Parser = MapList.Parser;
      });
      it("第1引数(parser)を渡すと，@parserにその値が格納される", function() {
        var obj, parser;

        obj = {};
        parser = new Parser(obj);
        return expect(parser.parser).toBe(obj);
      });
      it("parserがない場合，デフォルトのものを使う", function() {
        var parser;

        parser = new Parser;
        return expect(parser.parser).toBe(Parser.defaultParser);
      });
      describe(".execute", function() {
        it("parserに関数を渡した場合，executeでその関数を使う", function() {
          var identity, parser;

          identity = function(val) {
            return _(val).map(function(v) {
              return v - 1;
            });
          };
          parser = new Parser(identity);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        it("parserにObjectを渡した場合，Objectのexecuteメソッドを使う", function() {
          var myPerser, parser;

          myPerser = {
            execute: function(val) {
              return _(val).map(function(v) {
                return v - 1;
              });
            }
          };
          parser = new Parser(myPerser);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        return it("上記2つ以外のparserの場合, Errorを投げる", function() {
          var myPerser, parser;

          myPerser = {};
          parser = new Parser(myPerser);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(function() {
            return parser.execute(data);
          }).toThrow("parser is function or on object with the execute method");
        });
      });
      describe(".defaultParser", function() {
        it("arguments is array", function() {
          var _i, _results;

          data = (function() {
            _results = [];
            for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
            return _results;
          }).apply(this);
          return expect(Parser.defaultParser(data)).toEqual(data);
        });
        return it("arguments is xml", function() {
          return expect(Parser.defaultParser(data.entries.xml)).toEqual(data.entries.object);
        });
      });
      describe(".makeIcon", function() {
        it("with object", function() {
          var dst, src;

          src = {
            url: "foo.png",
            anchor: [10, 20],
            origin: [44, 42],
            size: [55, 55],
            scaledSize: [1, 1]
          };
          dst = {
            url: "foo.png",
            anchor: new google.maps.Point(10, 20),
            origin: new google.maps.Point(44, 42),
            size: new google.maps.Size(55, 55),
            scaledSize: new google.maps.Size(1, 1)
          };
          return expect(Parser.makeIcon(src)).toEqual(dst);
        });
        return it("with string", function() {
          var dst, src;

          src = "foo.png";
          dst = "foo.png";
          return expect(Parser.makeIcon(src)).toEqual(dst);
        });
      });
      describe("finallyParser", function() {
        it("with icon data", function() {
          var dst, src;

          src = {
            name: "hoge",
            icon: {
              url: "foo.png",
              anchor: [10, 20],
              origin: [44, 42],
              size: [55, 55],
              scaledSize: [1, 1]
            },
            shadow: {
              url: "foo.png",
              anchor: [10, 20],
              origin: [44, 42],
              size: [55, 55],
              scaledSize: [1, 1]
            }
          };
          dst = {
            name: "hoge",
            icon: {
              url: "foo.png",
              anchor: new google.maps.Point(10, 20),
              origin: new google.maps.Point(44, 42),
              size: new google.maps.Size(55, 55),
              scaledSize: new google.maps.Size(1, 1)
            },
            shadow: {
              url: "foo.png",
              anchor: new google.maps.Point(10, 20),
              origin: new google.maps.Point(44, 42),
              size: new google.maps.Size(55, 55),
              scaledSize: new google.maps.Size(1, 1)
            }
          };
          return expect(Parser.finallyParser(src)).toEqual(dst);
        });
        return it("no icon data", function() {
          var dst, src;

          src = {
            name: "hoge"
          };
          dst = {
            name: "hoge"
          };
          return expect(Parser.finallyParser(src)).toEqual(dst);
        });
      });
      describe(".XMLParser", function() {
        var parser, xml;

        parser = void 0;
        xml = void 0;
        beforeEach(function() {
          parser = new Parser.XMLParser;
          return xml = $.parseXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<places>\n  <genre id=\"fruits\" name=\"フルーツ\" icon=\"/fruits.png\">\n    <place latitude=\"123\" longitude=\"321\" icon=\"/apple.png\">\n      <name>A</name>\n      <longName>Apple</longName>\n    </place>\n    <place latitude=\"111\" longitude=\"222\">\n      <name>B</name>\n      <longName>Banana</longName>\n    </place>\n  </genre>\n</places>");
        });
        it(".getAttribute", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            latitude: "123",
            longitude: "321",
            icon: "/apple.png"
          };
          return expect(parser.getAttribute($place)).toEqual(ans);
        });
        it(".getContent", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            name: "A",
            longname: "Apple"
          };
          return expect(parser.getContent($place)).toEqual(ans);
        });
        it(".getGenre", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            genre: "fruits",
            genreName: "フルーツ",
            icon: "/fruits.png"
          };
          return expect(parser.getGenre($place)).toEqual(ans);
        });
        it(".makePlace", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            genre: "fruits",
            genreName: "フルーツ",
            name: "A",
            longname: "Apple",
            lat: "123",
            lng: "321",
            icon: "/apple.png"
          };
          return expect(parser.makePlace($place)).toEqual(ans);
        });
        return it(".execute", function() {
          var ans;

          ans = [
            {
              genre: "fruits",
              genreName: "フルーツ",
              name: "A",
              longname: "Apple",
              lat: "123",
              lng: "321",
              icon: "/apple.png"
            }, {
              genre: "fruits",
              genreName: "フルーツ",
              name: "B",
              longname: "Banana",
              lat: "111",
              lng: "222",
              icon: "/fruits.png"
            }
          ];
          return expect(parser.execute(xml)).toEqual(ans);
        });
      });
      return describe(".ObjectParser", function() {
        var parser;

        parser = void 0;
        beforeEach(function() {
          return parser = new Parser.ObjectParser;
        });
        return it(".execute", function() {
          data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toBe(data);
        });
      });
    });
    describe(".Entry", function() {
      var Entry;

      Entry = void 0;
      beforeEach(function() {
        return Entry = MapList.Entry;
      });
      describe("::makeInfo", function() {
        var entry, factory, info;

        entry = factory = info = void 0;
        beforeEach(function() {
          entry = new Backbone.Model({
            title: "FooBar"
          });
          entry.closeInfo = createSpy("closeInfo");
          factory = new MapList.HtmlFactory(_.template, "<%- title %>");
          return info = Entry.prototype.makeInfo.call(entry, factory);
        });
        it("instanceof InfoWindow", function() {
          return expect(info instanceof google.maps.InfoWindow).toBeTruthy();
        });
        it("make sure that info has content", function() {
          return expect(info.getContent()).toEqual("FooBar");
        });
        return it("fires the closeclick event and execute @closeInfo", function() {
          google.maps.event.trigger(info, "closeclick");
          return expect(entry.closeInfo).toHaveBeenCalled();
        });
      });
      describe("::makeMarker", function() {
        var entry, marker;

        entry = marker = void 0;
        beforeEach(function() {
          entry = new Backbone.Model({
            lat: 35,
            lng: 135,
            icon: "icon.png",
            shadow: "shadow.png"
          });
          entry.openInfo = createSpy("openInfo");
          entry.info = true;
          return marker = Entry.prototype.makeMarker.call(entry);
        });
        it("instance of Marker", function() {
          return expect(marker instanceof google.maps.Marker).toBeTruthy();
        });
        it("position instanceof LatLng", function() {
          return expect(marker.getPosition() instanceof google.maps.LatLng).toBeTruthy();
        });
        it("check lat", function() {
          return expect(marker.getPosition().lat()).toEqual(35);
        });
        it("check lng", function() {
          return expect(marker.getPosition().lng()).toEqual(135);
        });
        it("check icon", function() {
          return expect(marker.getIcon()).toEqual("icon.png");
        });
        it("check shadow", function() {
          return expect(marker.getShadow()).toEqual("shadow.png");
        });
        return it("fires the click event and execute @openInfo", function() {
          google.maps.event.trigger(marker, "click");
          return expect(entry.openInfo).toHaveBeenCalled();
        });
      });
      describe("::makeList", function() {
        var entry, factory, res;

        entry = factory = res = void 0;
        beforeEach(function() {
          entry = new Backbone.Model({
            title: "FooBar"
          });
          factory = new MapList.HtmlFactory(_.template, "<div><%- title %></div>");
          return res = Entry.prototype.makeList.call(entry, factory);
        });
        it("responce itstanceof jQuery", function() {
          return expect(res instanceof jQuery).toBeTruthy();
        });
        it("class is '__list'", function() {
          return expect(res.attr("class")).toEqual("__list");
        });
        return it("have entry", function() {
          return expect(res.data("entry")).toBe(entry);
        });
      });
      describe("::isSelect", function() {
        it("have not lat & lng", function() {
          var entry;

          entry = new Backbone.Model;
          return expect(Entry.prototype.isSelect.call(entry, "foo")).toBeFalsy();
        });
        it("genreId equal '__all__", function() {
          var entry;

          entry = new Backbone.Model({
            lat: 35,
            lng: 135
          });
          return expect(Entry.prototype.isSelect.call(entry, "__all__")).toBeTruthy();
        });
        it("by genreId true", function() {
          var entry;

          entry = new Backbone.Model({
            lat: 35,
            lng: 135,
            genre: "foo"
          });
          return expect(Entry.prototype.isSelect.call(entry, "foo")).toBeTruthy();
        });
        return it("by genreId false", function() {
          var entry;

          entry = new Backbone.Model({
            lat: 35,
            lng: 135,
            genre: "foo"
          });
          return expect(Entry.prototype.isSelect.call(entry, "bar")).toBeFalsy();
        });
      });
      describe("triger check", function() {
        var entry;

        entry = void 0;
        beforeEach(function() {
          return entry = new Backbone.Model;
        });
        it("::openInfo", function() {
          entry.on("openinfo", function(args) {
            return expect(args).toBe(entry);
          });
          return Entry.prototype.openInfo.call(entry);
        });
        return it("::closeInfo", function() {
          entry.on("closeinfo", function(args) {
            return expect(args).toBe(entry);
          });
          return Entry.prototype.closeInfo.call(entry);
        });
      });
      return describe("constructor", function() {
        var attributes, entry, options;

        attributes = options = entry = void 0;
        beforeEach(function() {
          attributes = {};
          options = MapList.prototype.makeOptions({});
          return entry = new Entry(attributes, options);
        });
        it("instance check info", function() {
          return expect(entry.info instanceof google.maps.InfoWindow).toBeTruthy();
        });
        it("instance check marker", function() {
          return expect(entry.marker instanceof google.maps.Marker).toBeTruthy();
        });
        return it("instance check list", function() {
          return expect(entry.list instanceof jQuery).toBeTruthy();
        });
      });
    });
    describe(".Entries", function() {
      var Entries, entries, obj, options, prop;

      Entries = void 0;
      obj = options = entries = prop = void 0;
      beforeEach(function() {
        Entries = MapList.Entries;
        obj = data.entries.object;
        options = MapList.prototype.makeOptions({});
        entries = new Entries(obj, options);
        return prop = "関東";
      });
      describe("constructor", function() {
        it("is instanceof Backbone.Collection", function() {
          return expect(entries instanceof Backbone.Collection).toBeTruthy();
        });
        it("attributes check", function() {
          return expect(entries.toJSON()).toEqual(obj);
        });
        return it("make sure that selectedList is empty", function() {
          return expect(entries.selectedList).toEqual([]);
        });
      });
      describe("::select", function() {
        it("return selected List", function() {
          var answer, responce;

          responce = entries.select(prop);
          answer = _(obj).filter(function(entry) {
            return entry.genre === prop;
          });
          return expect(_(responce).map(function(entry) {
            return entry.toJSON();
          })).toEqual(answer);
        });
        it("chche selected List", function() {
          var responce;

          responce = entries.select(prop);
          return expect(entries.selectedList).toBe(responce);
        });
        it("fires the select event", function() {
          var responce, spy;

          spy = createSpy("select");
          entries.on("select", spy);
          responce = entries.select(prop);
          return expect(spy).toHaveBeenCalled();
        });
        return it("fires the select event with arguments:0", function() {
          var responce, spy;

          spy = createSpy("select");
          entries.on("select", spy);
          responce = entries.select(prop);
          return expect(spy.calls[0].args[0]).toBe(responce);
        });
      });
      describe("::unselect", function() {
        it("return empty array", function() {
          return expect(entries.unselect()).toEqual([]);
        });
        it("chche selected List to empty", function() {
          entries.select(prop);
          return expect(entries.unselect()).toBe(entries.selectedList);
        });
        return it("fires the unselect event", function() {
          var responce, spy;

          spy = createSpy('unselect');
          entries.on("unselect", spy);
          responce = entries.unselect();
          return expect(spy).toHaveBeenCalled();
        });
      });
      /*
      describe "::selected",->
        it "return cached selectedList",->
          responce = entries.select(prop)
          expect(entries.selected()).toBe(responce)
      */

      return describe(".getSource", function() {
        it("array", function() {
          var source;

          source = Entries.getSource(obj);
          return source.then(function(data) {
            return expect(data).toEqual(obj);
          });
        });
        it("url:json", function() {
          var source,
            _this = this;

          source = Entries.getSource("data/entries.json");
          waitsFor(function() {
            return source.state() === "resolved";
          }, "timeout", 1000);
          return runs(function() {
            return source.then(function(data) {
              return expect(data).toEqual(obj);
            });
          });
        });
        return it("url:xml", function() {
          var source,
            _this = this;

          source = Entries.getSource("data/entries.xml");
          waitsFor(function() {
            return source.state() === "resolved";
          }, "timeout", 1000);
          return runs(function() {
            return source.then(function(data) {
              return expect(data).toEqual(obj);
            });
          });
        });
      });
    });
    describe(".HtmlFactory", function() {
      var HtmlFactory, factory, obj, template;

      obj = template = factory = HtmlFactory = void 0;
      beforeEach(function() {
        HtmlFactory = MapList.HtmlFactory;
        return obj = {
          title: "FooBar"
        };
      });
      describe("by _.template;", function() {
        beforeEach(function() {
          template = "<p><%- title %></p>";
          return factory = new HtmlFactory(_.template, template);
        });
        it("template unchange", function() {
          return expect(factory.template).toEqual(template);
        });
        it("getTemplateEngineName", function() {
          return expect(factory.getTemplateEngineName()).toEqual("_.template");
        });
        it("template chche", function() {
          var backup;

          backup = _.template;
          spyOn(_, 'template').andCallThrough();
          factory = new HtmlFactory(_.template, template);
          factory.make(obj);
          factory.make(obj);
          expect(_.template.calls.length).toEqual(1);
          return _.template = backup;
        });
        return it("make", function() {
          var answer;

          answer = "<p>FooBar</p>";
          return expect(factory.make(obj)).toEqual(answer);
        });
      });
      return describe("by $.tmpl;", function() {
        beforeEach(function() {
          template = "<p>${title}</p>";
          return factory = new HtmlFactory($.tmpl, template);
        });
        it("template wrap", function() {
          var answer;

          answer = "<wrap>" + template + "</wrap>";
          return expect(factory.template).toEqual(answer);
        });
        it("getTemplateEngineName", function() {
          return expect(factory.getTemplateEngineName()).toEqual("$.tmpl");
        });
        return it("make", function() {
          var answer;

          answer = "<p>FooBar</p>";
          return expect(factory.make(obj)).toEqual(answer);
        });
      });
    });
    describe(".MapView", function() {
      var entries, mapView, options;

      options = mapView = entries = void 0;
      beforeEach(function() {
        options = MapList.prototype.makeOptions({});
        mapView = new MapList.MapView(options);
        return entries = new MapList.Entries(data.entries.object, options);
      });
      afterEach(function() {
        return $("#map_canvas").children().remove();
      });
      describe("constructor", function() {
        it("instance of Backbone.View", function() {
          return expect(mapView instanceof Backbone.View).toBeTruthy();
        });
        return it("google maps create", function() {
          return expect(mapView.map instanceof google.maps.Map).toBeTruthy();
        });
      });
      describe("::build", function() {
        var setMap;

        setMap = void 0;
        beforeEach(function() {
          setMap = createSpy("setMap");
          entries.each(function(entry) {
            return entry.marker.setMap = setMap;
          });
          return mapView.fitBounds = createSpy("fitBounds");
        });
        it("execute entry.marker.setMap", function() {
          mapView.build(entries.models);
          return expect(setMap.calls.length).toEqual(entries.length);
        });
        it("execute entry.marker.setMap with @map", function() {
          mapView.build(entries.models);
          return expect(setMap.calls[0].args[0]).toBe(mapView.map);
        });
        it("execute @fitBounds if @options.doFit == true", function() {
          mapView.build(entries.models);
          return expect(mapView.fitBounds).toHaveBeenCalled();
        });
        return it("execute @fitBounds with entries", function() {
          mapView.build(entries.models);
          return expect(mapView.fitBounds.calls[0].args[0]).toBe(entries.models);
        });
      });
      describe("::fitBounds", function() {});
      describe("::clear", function() {
        var setMap;

        setMap = void 0;
        beforeEach(function() {
          setMap = createSpy("setMap");
          entries.each(function(entry) {
            return entry.marker.setMap = setMap;
          });
          mapView.closeOpenedInfo = createSpy("closeOpenedInfo");
          return mapView.clear(entries.models);
        });
        it("execute @closeOpenedInfo", function() {
          return expect(mapView.closeOpenedInfo).toHaveBeenCalled();
        });
        it("execute entry.marker.setMap", function() {
          return expect(setMap.calls.length).toEqual(entries.length);
        });
        return it("execute entry.marker.setMap with null", function() {
          return expect(setMap.calls[0].args[0]).toBe(null);
        });
      });
      describe("::openInfo", function() {
        var eventSpy, info, marker;

        info = marker = eventSpy = void 0;
        beforeEach(function() {
          mapView.closeOpenedInfo = createSpy("closeOpenedInfo");
          info = {
            open: createSpy("open")
          };
          marker = 'marker';
          eventSpy = createSpy('openedInfo');
          mapView.on('openedInfo', eventSpy);
          return mapView.openInfo(info, marker);
        });
        it("execute @closeOpenedInfo", function() {
          return expect(mapView.closeOpenedInfo).toHaveBeenCalled();
        });
        it("execute info.open", function() {
          return expect(info.open).toHaveBeenCalled();
        });
        it("execute info.open with 0:@map", function() {
          return expect(info.open.calls[0].args[0]).toBe(mapView.map);
        });
        it("execute info.open with 1:marker", function() {
          return expect(info.open.calls[0].args[1]).toBe(marker);
        });
        it("chche @openedInfo", function() {
          return expect(mapView.openedInfo).toBe(info);
        });
        it("fire openedInfo event", function() {
          return expect(eventSpy).toHaveBeenCalled();
        });
        it("fire openedInfo event with 0:info", function() {
          return expect(eventSpy.calls[0].args[0]).toBe(info);
        });
        return it("fire openedInfo event with 1:marker", function() {
          return expect(eventSpy.calls[0].args[1]).toBe(marker);
        });
      });
      return describe("closeOpenedInfo", function() {
        var close;

        close = void 0;
        beforeEach(function() {
          close = createSpy("close");
          mapView.openedInfo = {
            close: close
          };
          return mapView.closeOpenedInfo();
        });
        it("execute openedInfo.close", function() {
          return expect(close).toHaveBeenCalled();
        });
        return it("nonchche openedInfo", function() {
          return expect(mapView.openedInfo).toBe(null);
        });
      });
    });
    describe(".ListView", function() {
      var listView, options;

      listView = options = void 0;
      beforeEach(function() {
        options = MapList.prototype.makeOptions({});
        return listView = new MapList.ListView(options);
      });
      describe("constructor", function() {
        it("is instanceof Backbone.View", function() {
          return expect(listView instanceof Backbone.View).toBeTruthy();
        });
        it("check @$el is jQuey object", function() {
          return expect(listView.$el instanceof jQuery).toBeTruthy();
        });
        return it("check @$el.selector", function() {
          return expect(listView.$el.selector).toEqual(options.listSelector);
        });
      });
      describe("build", function() {
        var appendTo, entries;

        entries = appendTo = void 0;
        beforeEach(function() {
          entries = new MapList.Entries(data.entries.object, options);
          appendTo = createSpy("appendTo");
          entries.each(function(entry) {
            return entry.list.appendTo = appendTo;
          });
          return listView.build(entries.models);
        });
        it("execute entry.list.appendTo", function() {
          return expect(appendTo).toHaveBeenCalled();
        });
        return it("execute entry.list.appendTo width @$el", function() {
          return expect(appendTo.calls[0].args[0]).toBe(listView.$el);
        });
      });
      describe("clear", function() {
        var detach, entries;

        entries = detach = void 0;
        beforeEach(function() {
          entries = new MapList.Entries(data.entries.object, options);
          detach = createSpy("detach");
          entries.each(function(entry) {
            return entry.list.appendTo = detach;
          });
          return listView.build(entries.models);
        });
        return it("execute entry.list.appendTo", function() {
          return expect(detach).toHaveBeenCalled();
        });
      });
      return describe("openInfo", function() {
        var $elem, spy;

        $elem = spy = void 0;
        beforeEach(function() {
          var e, selector;

          selector = options.openInfoSelector;
          spy = createSpy("openInfo");
          e = {
            currentTarget: $("<div>").data(options.genreDataName, "foo")[0]
          };
          return $elem = $("<div class='__list'><a class='" + selector.slice(1) + "'></a></div>").on("click", selector, listView.openInfo).data("entry", {
            openInfo: spy
          }).find(selector).trigger("click");
        });
        return it("execute openInfo of entry", function() {
          return expect(spy).toHaveBeenCalled();
        });
      });
    });
    return describe(".GenreView", function() {
      var genreView, options;

      genreView = options = void 0;
      beforeEach(function() {
        options = MapList.prototype.makeOptions({});
        return genreView = new MapList.GenresView(options);
      });
      describe("constructor", function() {
        it("is instanceof Backbone.View", function() {
          return expect(genreView instanceof Backbone.View).toBeTruthy();
        });
        it("check @$el is jQuey object", function() {
          return expect(genreView.$el instanceof jQuery).toBeTruthy();
        });
        return it("check @$el.selector", function() {
          return expect(genreView.$el.selector).toEqual(options.genresSelector);
        });
      });
      return describe("::selectGenre", function() {
        var $elem, spy;

        $elem = spy = void 0;
        beforeEach(function() {
          var e;

          e = {
            currentTarget: $("<div>").data(options.genreDataName, "foo")[0]
          };
          genreView.trigger = spy = createSpy("change:genre");
          return genreView.selectGenre(e);
        });
        it("fire change:genre event", function() {
          return expect(spy).toHaveBeenCalled();
        });
        it("fire change:genre event with 0:eventName", function() {
          return expect(spy.calls[0].args[0]).toEqual("change:genre");
        });
        return it("fire change:genre event with 1:genreId", function() {
          return expect(spy.calls[0].args[1]).toEqual("foo");
        });
      });
    });
  });

}).call(this);
