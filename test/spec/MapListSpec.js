// Generated by CoffeeScript 1.6.2
(function() {
  describe("MapList", function() {
    describe(".Entries", function() {
      var Entries, ans;

      Entries = void 0;
      ans = void 0;
      return beforeEach(function() {
        Entries = MapList.Entries;
        return ans = [
          {
            genre: "fruits",
            genreName: "フルーツ",
            name: "A",
            longname: "Apple",
            lat: "123",
            lng: "321",
            icon: "/apple.png"
          }, {
            genre: "fruits",
            genreName: "フルーツ",
            name: "B",
            longname: "Banana",
            lat: "111",
            lng: "222",
            icon: "/fruits.png"
          }
        ];
      });
      /*
      it "@getSource ( array )", ->
        source = Entries.getSource([1..100])
        source.then (data)->
          expect(data).toEqual([1..100])
      
      it "@getSource ( url:json )", ->
        source = Entries.getSource("entries.json")
        source.then (data)->
          console.log data
          expect(data).toEqual(ans)
      
      it "@getSource ( url:xml )", ->
        source = Entries.getSource("entries.xml")
        source.then (data)->
          console.log data
          expect(data).toEqual(ans)
      */

    });
    return describe(".Parser", function() {
      var Parser;

      Parser = void 0;
      beforeEach(function() {
        return Parser = MapList.Parser;
      });
      it("第1引数(parser)を渡すと，@parserにその値が格納される", function() {
        var obj, parser;

        obj = {};
        parser = new Parser(obj);
        return expect(parser.parser).toBe(obj);
      });
      it("parserがない場合，デフォルトのものを使う", function() {
        var parser;

        parser = new Parser;
        return expect(parser.parser).toBe(Parser.defaultParser);
      });
      describe(".execute", function() {
        it("parserに関数を渡した場合，executeでその関数を使う", function() {
          var data, identity, parser;

          identity = function(val) {
            return _(val).map(function(v) {
              return v - 1;
            });
          };
          parser = new Parser(identity);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        it("parserにObjectを渡した場合，Objectのexecuteメソッドを使う", function() {
          var data, myPerser, parser;

          myPerser = {
            execute: function(val) {
              return _(val).map(function(v) {
                return v - 1;
              });
            }
          };
          parser = new Parser(myPerser);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
        return it("上記2つ以外のparserの場合, Errorを投げる", function() {
          var data, myPerser, parser;

          myPerser = {};
          parser = new Parser(myPerser);
          data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(function() {
            return parser.execute(data);
          }).toThrow("parser is function or on object with the execute method");
        });
      });
      describe(".defaultParser", function() {
        it("arguments is array", function() {
          var data, _i, _results;

          data = (function() {
            _results = [];
            for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
            return _results;
          }).apply(this);
          return expect(Parser.defaultParser(data)).toEqual(data);
        });
        return it("arguments is xml", function() {
          var ans, xml;

          xml = $.parseXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<places>\n  <genre id=\"fruits\" name=\"フルーツ\" icon=\"/fruits.png\">\n    <place latitude=\"123\" longitude=\"321\" icon=\"/apple.png\">\n      <name>A</name>\n      <longName>Apple</longName>\n    </place>\n    <place latitude=\"111\" longitude=\"222\">\n      <name>B</name>\n      <longName>Banana</longName>\n    </place>\n  </genre>\n</places>");
          ans = [
            {
              genre: "fruits",
              genreName: "フルーツ",
              name: "A",
              longname: "Apple",
              lat: "123",
              lng: "321",
              icon: "/apple.png"
            }, {
              genre: "fruits",
              genreName: "フルーツ",
              name: "B",
              longname: "Banana",
              lat: "111",
              lng: "222",
              icon: "/fruits.png"
            }
          ];
          return expect(Parser.defaultParser(xml)).toEqual(ans);
        });
      });
      describe(".XMLParser", function() {
        var parser, xml;

        parser = void 0;
        xml = void 0;
        beforeEach(function() {
          parser = new Parser.XMLParser;
          return xml = $.parseXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<places>\n  <genre id=\"fruits\" name=\"フルーツ\" icon=\"/fruits.png\">\n    <place latitude=\"123\" longitude=\"321\" icon=\"/apple.png\">\n      <name>A</name>\n      <longName>Apple</longName>\n    </place>\n    <place latitude=\"111\" longitude=\"222\">\n      <name>B</name>\n      <longName>Banana</longName>\n    </place>\n  </genre>\n</places>");
        });
        it(".getAttribute", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            latitude: "123",
            longitude: "321",
            icon: "/apple.png"
          };
          return expect(parser.getAttribute($place)).toEqual(ans);
        });
        it(".getContent", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            name: "A",
            longname: "Apple"
          };
          return expect(parser.getContent($place)).toEqual(ans);
        });
        it(".getGenre", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            genre: "fruits",
            genreName: "フルーツ",
            icon: "/fruits.png"
          };
          return expect(parser.getGenre($place)).toEqual(ans);
        });
        it(".makePlace", function() {
          var $place, ans;

          $place = $("place", xml).eq(0);
          ans = {
            genre: "fruits",
            genreName: "フルーツ",
            name: "A",
            longname: "Apple",
            lat: "123",
            lng: "321",
            icon: "/apple.png"
          };
          return expect(parser.makePlace($place)).toEqual(ans);
        });
        return it(".execute", function() {
          var ans;

          ans = [
            {
              genre: "fruits",
              genreName: "フルーツ",
              name: "A",
              longname: "Apple",
              lat: "123",
              lng: "321",
              icon: "/apple.png"
            }, {
              genre: "fruits",
              genreName: "フルーツ",
              name: "B",
              longname: "Banana",
              lat: "111",
              lng: "222",
              icon: "/fruits.png"
            }
          ];
          return expect(parser.execute(xml)).toEqual(ans);
        });
      });
      return describe(".ObjectParser", function() {
        var parser;

        parser = void 0;
        beforeEach(function() {
          return parser = new Parser.ObjectParser;
        });
        return it(".execute", function() {
          var data;

          data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          return expect(parser.execute(data)).toBe(data);
        });
      });
    });
  });

}).call(this);
