// Generated by CoffeeScript 1.6.3
(function() {
  var log,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log.apply(console, args) : void 0 : void 0;
  };

  describe("MapList", function() {
    beforeEach(function() {
      this.createSpy = jasmine.createSpy;
      this.createSpyObj = jasmine.createSpyObj;
      return this.data = {
        entries: {
          object: [
            {
              "states": "北海道",
              "capitals": "札幌市",
              "lat": "43.0646147",
              "lng": "141.3468074",
              "genre": "北海道"
            }, {
              "states": "青森県",
              "capitals": "青森市",
              "lat": "41.8243077",
              "lng": "140.7399984",
              "genre": "東北"
            }, {
              "states": "岩手県",
              "capitals": "盛岡市",
              "lat": "39.7036194",
              "lng": "141.1526839",
              "genre": "東北"
            }, {
              "states": "宮城県",
              "capitals": "仙台市",
              "lat": "38.2688373",
              "lng": "140.8721000",
              "genre": "東北"
            }, {
              "states": "秋田県",
              "capitals": "秋田市",
              "lat": "39.7186135",
              "lng": "140.1023643",
              "genre": "東北"
            }, {
              "states": "山形県",
              "capitals": "山形市",
              "lat": "38.2404355",
              "lng": "140.3636333",
              "genre": "東北"
            }, {
              "states": "福島県",
              "capitals": "福島市",
              "lat": "37.7502986",
              "lng": "140.4675514",
              "genre": "東北"
            }, {
              "states": "茨城県",
              "capitals": "水戸市",
              "lat": "36.3418112",
              "lng": "140.4467935",
              "genre": "関東"
            }, {
              "states": "栃木県",
              "capitals": "宇都宮市",
              "lat": "36.5657250",
              "lng": "139.8835651",
              "genre": "関東"
            }, {
              "states": "群馬県",
              "capitals": "前橋市",
              "lat": "36.3906675",
              "lng": "139.0604061",
              "genre": "関東"
            }, {
              "states": "埼玉県",
              "capitals": "さいたま市",
              "lat": "35.8569991",
              "lng": "139.6488487",
              "genre": "関東"
            }, {
              "states": "千葉県",
              "capitals": "千葉市",
              "lat": "35.6050574",
              "lng": "140.1233063",
              "genre": "関東"
            }, {
              "states": "東京都",
              "capitals": "新宿区",
              "lat": "35.6894875",
              "lng": "139.6917064",
              "genre": "関東"
            }, {
              "states": "神奈川県",
              "capitals": "横浜市",
              "lat": "35.4475073",
              "lng": "139.6423446",
              "genre": "関東"
            }, {
              "states": "山梨県",
              "capitals": "甲府市",
              "lat": "35.6641575",
              "lng": "138.5684486",
              "genre": "関東"
            }, {
              "states": "新潟県",
              "capitals": "新潟市",
              "lat": "37.9025518",
              "lng": "139.0230946",
              "genre": "信越"
            }, {
              "states": "長野県",
              "capitals": "長野市",
              "lat": "36.6512986",
              "lng": "138.1809557",
              "genre": "信越"
            }, {
              "states": "富山県",
              "capitals": "富山市",
              "lat": "36.6952907",
              "lng": "137.2113383",
              "genre": "北陸"
            }, {
              "states": "石川県",
              "capitals": "金沢市",
              "lat": "36.5946816",
              "lng": "136.6255726",
              "genre": "北陸"
            }, {
              "states": "福井県",
              "capitals": "福井市",
              "lat": "36.0651779",
              "lng": "136.2215269",
              "genre": "北陸"
            }, {
              "states": "岐阜県",
              "capitals": "岐阜市",
              "lat": "35.3912272",
              "lng": "136.7222906",
              "genre": "東海"
            }, {
              "states": "静岡県",
              "capitals": "静岡市",
              "lat": "34.9771201",
              "lng": "138.3830845",
              "genre": "東海"
            }, {
              "states": "愛知県",
              "capitals": "名古屋市",
              "lat": "35.1801883",
              "lng": "136.9065647",
              "genre": "東海"
            }, {
              "states": "三重県",
              "capitals": "津市",
              "lat": "34.7302829",
              "lng": "136.5085883",
              "genre": "東海"
            }, {
              "states": "滋賀県",
              "capitals": "大津市",
              "lat": "35.0045306",
              "lng": "135.8685899",
              "genre": "近畿"
            }, {
              "states": "京都府",
              "capitals": "京都市",
              "lat": "35.0212466",
              "lng": "135.7555968",
              "genre": "近畿"
            }, {
              "states": "大阪府",
              "capitals": "大阪市",
              "lat": "34.6862971",
              "lng": "135.5196609",
              "genre": "近畿"
            }, {
              "states": "兵庫県",
              "capitals": "神戸市",
              "lat": "34.6912688",
              "lng": "135.1830706",
              "genre": "近畿"
            }, {
              "states": "奈良県",
              "capitals": "奈良市",
              "lat": "34.6853345",
              "lng": "135.8327421",
              "genre": "近畿"
            }, {
              "states": "和歌山県",
              "capitals": "和歌山市",
              "lat": "34.2259867",
              "lng": "135.1675086",
              "genre": "近畿"
            }, {
              "states": "鳥取県",
              "capitals": "鳥取市",
              "lat": "35.5038906",
              "lng": "134.2377356",
              "genre": "中国"
            }, {
              "states": "島根県",
              "capitals": "松江市",
              "lat": "35.4722952",
              "lng": "133.0504997",
              "genre": "中国"
            }, {
              "states": "岡山県",
              "capitals": "岡山市",
              "lat": "34.6617511",
              "lng": "133.9344057",
              "genre": "中国"
            }, {
              "states": "広島県",
              "capitals": "広島市",
              "lat": "34.3965603",
              "lng": "132.4596225",
              "genre": "中国"
            }, {
              "states": "山口県",
              "capitals": "山口市",
              "lat": "34.1859563",
              "lng": "131.4706493",
              "genre": "中国"
            }, {
              "states": "徳島県",
              "capitals": "徳島市",
              "lat": "34.0657179",
              "lng": "134.5593601",
              "genre": "四国"
            }, {
              "states": "香川県",
              "capitals": "高松市",
              "lat": "34.3401491",
              "lng": "134.0434436",
              "genre": "四国"
            }, {
              "states": "愛媛県",
              "capitals": "松山市",
              "lat": "33.8416238",
              "lng": "132.7656808",
              "genre": "四国"
            }, {
              "states": "高知県",
              "capitals": "高知市",
              "lat": "33.5597062",
              "lng": "133.5310786",
              "genre": "四国"
            }, {
              "states": "福岡県",
              "capitals": "福岡市",
              "lat": "33.6065756",
              "lng": "130.4182970",
              "genre": "九州"
            }, {
              "states": "佐賀県",
              "capitals": "佐賀市",
              "lat": "33.2494416",
              "lng": "130.2997942",
              "genre": "九州"
            }, {
              "states": "長崎県",
              "capitals": "長崎市",
              "lat": "32.7448388",
              "lng": "129.8737562",
              "genre": "九州"
            }, {
              "states": "熊本県",
              "capitals": "熊本市",
              "lat": "32.7898270",
              "lng": "130.7416672",
              "genre": "九州"
            }, {
              "states": "大分県",
              "capitals": "大分市",
              "lat": "33.2381718",
              "lng": "131.6126189",
              "genre": "九州"
            }, {
              "states": "宮崎県",
              "capitals": "宮崎市",
              "lat": "31.9110956",
              "lng": "131.4238934",
              "genre": "九州"
            }, {
              "states": "鹿児島県",
              "capitals": "鹿児島市",
              "lat": "31.5610825",
              "lng": "130.5577279",
              "genre": "九州"
            }, {
              "states": "沖縄県",
              "capitals": "那覇市",
              "lat": "26.2124013",
              "lng": "127.6809317",
              "genre": "沖縄"
            }
          ],
          xml: $.parseXML("<?xml version='1.0' encoding='UTF-8'?>\n<places>\n<genre id='北海道'><place latitude='43.0646147' longitude='141.3468074'><states>北海道</states><capitals>札幌市</capitals></place></genre>\n<genre id='東北'><place latitude='41.8243077' longitude='140.7399984'><states>青森県</states><capitals>青森市</capitals></place><place latitude='39.7036194' longitude='141.1526839'><states>岩手県</states><capitals>盛岡市</capitals></place><place latitude='38.2688373' longitude='140.8721000'><states>宮城県</states><capitals>仙台市</capitals></place><place latitude='39.7186135' longitude='140.1023643'><states>秋田県</states><capitals>秋田市</capitals></place><place latitude='38.2404355' longitude='140.3636333'><states>山形県</states><capitals>山形市</capitals></place><place latitude='37.7502986' longitude='140.4675514'><states>福島県</states><capitals>福島市</capitals></place></genre>\n<genre id='関東'><place latitude='36.3418112' longitude='140.4467935'><states>茨城県</states><capitals>水戸市</capitals></place><place latitude='36.5657250' longitude='139.8835651'><states>栃木県</states><capitals>宇都宮市</capitals></place><place latitude='36.3906675' longitude='139.0604061'><states>群馬県</states><capitals>前橋市</capitals></place><place latitude='35.8569991' longitude='139.6488487'><states>埼玉県</states><capitals>さいたま市</capitals></place><place latitude='35.6050574' longitude='140.1233063'><states>千葉県</states><capitals>千葉市</capitals></place><place latitude='35.6894875' longitude='139.6917064'><states>東京都</states><capitals>新宿区</capitals></place><place latitude='35.4475073' longitude='139.6423446'><states>神奈川県</states><capitals>横浜市</capitals></place><place latitude='35.6641575' longitude='138.5684486'><states>山梨県</states><capitals>甲府市</capitals></place></genre>\n<genre id='信越'><place latitude='37.9025518' longitude='139.0230946'><states>新潟県</states><capitals>新潟市</capitals></place><place latitude='36.6512986' longitude='138.1809557'><states>長野県</states><capitals>長野市</capitals></place></genre>\n<genre id='北陸'><place latitude='36.6952907' longitude='137.2113383'><states>富山県</states><capitals>富山市</capitals></place><place latitude='36.5946816' longitude='136.6255726'><states>石川県</states><capitals>金沢市</capitals></place><place latitude='36.0651779' longitude='136.2215269'><states>福井県</states><capitals>福井市</capitals></place></genre>\n<genre id='東海'><place latitude='35.3912272' longitude='136.7222906'><states>岐阜県</states><capitals>岐阜市</capitals></place><place latitude='34.9771201' longitude='138.3830845'><states>静岡県</states><capitals>静岡市</capitals></place><place latitude='35.1801883' longitude='136.9065647'><states>愛知県</states><capitals>名古屋市</capitals></place><place latitude='34.7302829' longitude='136.5085883'><states>三重県</states><capitals>津市</capitals></place></genre>\n<genre id='近畿'><place latitude='35.0045306' longitude='135.8685899'><states>滋賀県</states><capitals>大津市</capitals></place><place latitude='35.0212466' longitude='135.7555968'><states>京都府</states><capitals>京都市</capitals></place><place latitude='34.6862971' longitude='135.5196609'><states>大阪府</states><capitals>大阪市</capitals></place><place latitude='34.6912688' longitude='135.1830706'><states>兵庫県</states><capitals>神戸市</capitals></place><place latitude='34.6853345' longitude='135.8327421'><states>奈良県</states><capitals>奈良市</capitals></place><place latitude='34.2259867' longitude='135.1675086'><states>和歌山県</states><capitals>和歌山市</capitals></place></genre>\n<genre id='中国'><place latitude='35.5038906' longitude='134.2377356'><states>鳥取県</states><capitals>鳥取市</capitals></place><place latitude='35.4722952' longitude='133.0504997'><states>島根県</states><capitals>松江市</capitals></place><place latitude='34.6617511' longitude='133.9344057'><states>岡山県</states><capitals>岡山市</capitals></place><place latitude='34.3965603' longitude='132.4596225'><states>広島県</states><capitals>広島市</capitals></place><place latitude='34.1859563' longitude='131.4706493'><states>山口県</states><capitals>山口市</capitals></place></genre>\n<genre id='四国'><place latitude='34.0657179' longitude='134.5593601'><states>徳島県</states><capitals>徳島市</capitals></place><place latitude='34.3401491' longitude='134.0434436'><states>香川県</states><capitals>高松市</capitals></place><place latitude='33.8416238' longitude='132.7656808'><states>愛媛県</states><capitals>松山市</capitals></place><place latitude='33.5597062' longitude='133.5310786'><states>高知県</states><capitals>高知市</capitals></place></genre>\n<genre id='九州'><place latitude='33.6065756' longitude='130.4182970'><states>福岡県</states><capitals>福岡市</capitals></place><place latitude='33.2494416' longitude='130.2997942'><states>佐賀県</states><capitals>佐賀市</capitals></place><place latitude='32.7448388' longitude='129.8737562'><states>長崎県</states><capitals>長崎市</capitals></place><place latitude='32.7898270' longitude='130.7416672'><states>熊本県</states><capitals>熊本市</capitals></place><place latitude='33.2381718' longitude='131.6126189'><states>大分県</states><capitals>大分市</capitals></place><place latitude='31.9110956' longitude='131.4238934'><states>宮崎県</states><capitals>宮崎市</capitals></place><place latitude='31.5610825' longitude='130.5577279'><states>鹿児島県</states><capitals>鹿児島市</capitals></place></genre>\n<genre id='沖縄'><place latitude='26.2124013' longitude='127.6809317'><states>沖縄県</states><capitals>那覇市</capitals></place></genre>\n</places>")
        },
        matcher: {
          toDeepEqual: function(expected) {
            return _.isEqual(this.actual, expected);
          }
        }
      };
    });
    describe("App", function() {
      beforeEach(function() {
        return this.maplist = new MapList;
      });
      describe("::create", function() {
        return it("return MapList instance", function() {
          return expect(MapList.create() instanceof MapList).toBeTruthy();
        });
      });
      describe(".start", function() {
        beforeEach(function() {
          spyOn(this.maplist.entries, "reset");
          return this.result = this.maplist.start([]);
        });
        it("call @entries.reset", function() {
          return expect(this.maplist.entries.reset).toHaveBeenCalled();
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".build", function() {
        beforeEach(function() {
          spyOn(this.maplist.mapView, "build");
          spyOn(this.maplist.listView, "build");
          this.maplist.on("beforeBuild", this.before = this.createSpy(""));
          this.maplist.on("afterBuild", this.after = this.createSpy(""));
          this.prop = this.maplist.getProperties();
          return this.result = this.maplist.build(this.entries = "entries");
        });
        it("call other methods", function() {
          expect(this.maplist.mapView.build).toHaveBeenCalled();
          return expect(this.maplist.listView.build).toHaveBeenCalled();
        });
        it("fire events", function() {
          expect(this.before).toHaveBeenCalled();
          expect(this.before.calls[0].args).toEqual([this.entries, this.prop]);
          expect(this.after).toHaveBeenCalled();
          return expect(this.after.calls[0].args).toEqual([this.entries, this.prop]);
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".clear", function() {
        beforeEach(function() {
          spyOn(this.maplist.mapView, "clear");
          spyOn(this.maplist.listView, "clear");
          this.maplist.on("beforeClear", this.before = this.createSpy(""));
          this.maplist.on("afterClear", this.after = this.createSpy(""));
          return this.result = this.maplist.clear();
        });
        it("call other methods", function() {
          expect(this.maplist.mapView.clear).toHaveBeenCalled();
          return expect(this.maplist.listView.clear).toHaveBeenCalled();
        });
        it("fire events", function() {
          expect(this.before).toHaveBeenCalled();
          return expect(this.after).toHaveBeenCalled();
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".openInfo", function() {
        beforeEach(function() {
          spyOn(this.maplist.mapView, "openInfo");
          this.maplist.on("openInfo", this.before = this.createSpy(""));
          this.maplist.on("openedInfo", this.after = this.createSpy(""));
          this.entry = {
            info: "info",
            marker: "marker"
          };
          return this.result = this.maplist.openInfo(this.entry);
        });
        it("call other methods", function() {
          return expect(this.maplist.mapView.openInfo).toHaveBeenCalled();
        });
        it("fire events", function() {
          expect(this.before).toHaveBeenCalled();
          return expect(this.after).toHaveBeenCalled();
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".closeInfo", function() {
        beforeEach(function() {
          spyOn(this.maplist.mapView, "closeOpenedInfo");
          this.maplist.on("closeInfo", this.before = this.createSpy(""));
          this.maplist.on("closedInfo", this.after = this.createSpy(""));
          return this.result = this.maplist.closeInfo();
        });
        it("call other methods", function() {
          return expect(this.maplist.mapView.closeOpenedInfo).toHaveBeenCalled();
        });
        it("fire events", function() {
          expect(this.before).toHaveBeenCalled();
          return expect(this.after).toHaveBeenCalled();
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".changeGenre", function() {
        beforeEach(function() {
          this.maplist.changeGenre("key", "init");
          this.maplist.changeGenre("foo", "bar");
          return spyOn(this.maplist, "changeProperties");
        });
        it("common", function() {
          this.maplist.changeGenre("key", "val");
          expect(this.maplist.changeProperties).toHaveBeenCalled();
          return expect(this.maplist.changeProperties.calls[0].args[0]).toEqual({
            key: "val",
            foo: "bar"
          });
        });
        it("fire events", function() {
          var after, before;
          this.maplist.on("changeGenre", before = this.createSpy(""));
          this.maplist.on("changedGenre", after = this.createSpy(""));
          this.maplist.changeGenre("key", "val");
          expect(before).toHaveBeenCalled();
          return expect(after).toHaveBeenCalled();
        });
        it("when val is undefined", function() {
          this.maplist.changeGenre("key");
          return expect(this.maplist.changeProperties.calls[0].args[0]).toEqual({
            foo: "bar"
          });
        });
        it("when val is '__all__'", function() {});
        it("when val is undefined", function() {
          this.maplist.changeGenre("key", "__all__");
          return expect(this.maplist.changeProperties.calls[0].args[0]).toEqual({
            foo: "bar"
          });
        });
        return it("return value", function() {
          var result;
          result = this.maplist.changeGenre("key", "val");
          return expect(result).toBe(this.maplist);
        });
      });
      describe(".changeProperties", function() {
        beforeEach(function() {
          spyOn(this.maplist, "rebuild");
          this.maplist.on("changeProperties", this.before = this.createSpy(""));
          this.maplist.on("changedProperties", this.after = this.createSpy(""));
          return this.result = this.maplist.changeProperties(this.obj = {});
        });
        it("call other methods", function() {
          expect(this.maplist.rebuild).toHaveBeenCalled();
          return expect(this.maplist.rebuild.calls[0].args[0]).toBe(this.obj);
        });
        it("fire events", function() {
          expect(this.before).toHaveBeenCalled();
          return expect(this.after).toHaveBeenCalled();
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".rebuild", function() {
        beforeEach(function() {
          spyOn(this.maplist.entries, "unselect");
          spyOn(this.maplist.entries, "select");
          return this.result = this.maplist.rebuild(this.prop = {});
        });
        it("call other methods", function() {
          expect(this.maplist.entries.unselect).toHaveBeenCalled();
          expect(this.maplist.entries.select).toHaveBeenCalled();
          return expect(this.maplist.entries.select.calls[0].args[0]).toBe(this.prop);
        });
        return it("return value", function() {
          return expect(this.result).toBe(this.maplist);
        });
      });
      describe(".getMap", function() {
        return it("common", function() {
          expect(this.maplist.getMap()).toBe(this.maplist.mapView.map);
          return expect(this.maplist.getMap() instanceof google.maps.Map).toBeTruthy();
        });
      });
      return describe(".getProperties", function() {
        return it("common", function() {
          return expect(this.maplist.getProperties()).toBe(this.maplist.entries.properties);
        });
      });
    });
    describe("Options", function() {
      beforeEach(function() {
        return this.Options = MapList.Options;
      });
      it("without my options", function() {
        var options;
        options = new this.Options;
        return expect(options.mapSelector).toBe(this.Options.defaults().mapSelector);
      });
      return it("with my options", function() {
        var myOptions, options;
        myOptions = {
          mapSelector: "#map"
        };
        options = new this.Options(myOptions);
        return expect(options.mapSelector).toBe(myOptions.mapSelector);
      });
    });
    describe("AppDelegator", function() {
      beforeEach(function() {
        return this.AppDelegator = MapList.AppDelegator;
      });
      return it("execute", function() {
        var app, delegator;
        delegator = new this.AppDelegator;
        app = new MapList;
        app.entries.on = this.createSpy("");
        app.genresView.on = this.createSpy("");
        delegator.execute(app);
        expect(app.entries.on).toHaveBeenCalled();
        return expect(app.genresView.on).toHaveBeenCalled();
      });
    });
    describe("Source", function() {
      beforeEach(function() {
        var _this = this;
        this.Source = MapList.Source;
        this.waitFunc = function() {
          return _this.result.state() === "resolved";
        };
        return this.runFunc = function() {
          return _this.result.then(function(data) {
            return expect(data).toEqual(_this.data.entries.object);
          });
        };
      });
      return describe(".get", function() {
        it("common", function() {
          var result, source;
          source = new this.Source([], {});
          result = source.get();
          expect(_.isFunction(result.then)).toBeTruthy();
          expect(_.isFunction(result.done)).toBeTruthy();
          return expect(_.isFunction(result.fail)).toBeTruthy();
        });
        it("data is Array", function() {
          var obj, source;
          obj = this.data.entries.object;
          source = new this.Source(obj, {});
          this.result = source.get();
          waitsFor(this.waitFunc, "timeout", 100);
          return runs(this.runFunc);
        });
        it("data is URL String :json", function() {
          var source;
          source = new this.Source("data/entries.json", {});
          this.result = source.get();
          waitsFor(this.waitFunc, "timeout", 100);
          return runs(this.runFunc);
        });
        return it("data is URL String :xml", function() {
          var source;
          source = new this.Source("data/entries.xml", {});
          this.result = source.get();
          waitsFor(this.waitFunc, "timeout", 100);
          return runs(this.runFunc);
        });
      });
    });
    describe("Parser", function() {
      beforeEach(function() {
        return this.Parser = MapList.Parser;
      });
      describe("constructor", function() {
        return it("common", function() {
          var options, parser;
          options = Object.create(null);
          parser = new this.Parser(options);
          return expect(parser.options).toBe(options);
        });
      });
      describe(".execute", function() {
        return it("return Object", function() {
          var result;
          this.parser = new this.Parser;
          result = this.parser.execute({});
          return expect(result instanceof Object).toBeTruthy();
        });
      });
      describe(".parse", function() {
        beforeEach(function() {
          return this.parser = new this.Parser;
        });
        it("when parser is function", function() {
          var func;
          func = this.createSpy("");
          this.parser.parse({}, func);
          return expect(func).toHaveBeenCalled();
        });
        it("when parser is object with execute method", function() {
          var obj;
          obj = {
            execute: this.createSpy("")
          };
          this.parser.parse({}, obj);
          return expect(obj.execute).toHaveBeenCalled();
        });
        return it("when other parse", function() {
          var func;
          func = function() {
            return this.parser.parse({}, null);
          };
          return expect(func).toThrow();
        });
      });
      describe(".getParserSequence", function() {
        return it("common", function() {
          var result;
          this.parser = new this.Parser;
          result = this.parser.getParserSequence();
          return expect(_.isArray(result)).toBeTruthy();
        });
      });
      describe(".getCommonParser", function() {
        it("common", function() {
          var result;
          this.parser = new this.Parser;
          result = this.parser.getCommonParser();
          return expect(result instanceof this.Parser.DefaultParser).toBeTruthy();
        });
        return it("with options", function() {
          var obj, result;
          obj = {};
          this.parser = new this.Parser({
            parser: obj
          });
          result = this.parser.getCommonParser();
          return expect(result).toBe(obj);
        });
      });
      return describe(".getAfterParser", function() {
        it("common", function() {
          var result;
          this.parser = new this.Parser;
          result = this.parser.getAfterParser();
          return expect(result).toBe(_.identity);
        });
        return it("with options", function() {
          var obj, result;
          obj = {};
          this.parser = new this.Parser({
            afterParser: obj
          });
          result = this.parser.getAfterParser();
          return expect(result).toBe(obj);
        });
      });
    });
    describe("Parser::DefaultParser", function() {
      beforeEach(function() {
        return this.DefaultParser = MapList.Parser.DefaultParser;
      });
      return describe(".execute", function() {
        it("xml data", function() {
          var parser, result;
          parser = new this.DefaultParser({});
          result = parser.execute(this.data.entries.xml);
          return expect(result).toEqual(this.data.entries.object);
        });
        it("object data", function() {
          var parser, result;
          parser = new this.DefaultParser({});
          result = parser.execute(this.data.entries.object);
          return expect(result).toEqual(this.data.entries.object);
        });
        return it("other data", function() {
          var func, parser;
          parser = new this.DefaultParser({});
          func = function() {
            return parser.execute(null);
          };
          return expect(func).toThrow();
        });
      });
    });
    describe("Parser::MapIconDecorator", function() {
      beforeEach(function() {
        this.MapIconDecorator = MapList.Parser.MapIconDecorator;
        return this.decorator = new this.MapIconDecorator;
      });
      describe("execute", function() {
        return it("common", function() {
          var data;
          this.decorator.makeIcon = this.createSpy("");
          data = [
            {
              icon: true,
              shadow: true
            }, {
              icon: true
            }
          ];
          this.decorator.execute(data);
          expect(this.decorator.makeIcon).toHaveBeenCalled();
          return expect(this.decorator.makeIcon.calls.length).toEqual(3);
        });
      });
      return describe("makeIcon", function() {
        return it("common", function() {
          var data, result;
          data = {
            origin: [1, 2],
            anchor: [9, 9],
            size: [4, 2],
            scaledSize: [5, 7],
            other: 42
          };
          result = this.decorator.makeIcon(data);
          expect(result).not.toBe(data);
          expect(result.origin instanceof google.maps.Point).toBeTruthy();
          expect(result.anchor instanceof google.maps.Point).toBeTruthy();
          expect(result.size instanceof google.maps.Size).toBeTruthy();
          expect(result.scaledSize instanceof google.maps.Size).toBeTruthy();
          return expect(result.other).toEqual(data.other);
        });
      });
    });
    describe("Parser::XMLParser", function() {
      return it("execute", function() {
        var parser, result;
        parser = new MapList.Parser.XMLParser;
        result = parser.execute(this.data.entries.xml);
        return expect(result).toEqual(this.data.entries.object);
      });
    });
    describe("Parser::ObjectParser", function() {
      return it("execute", function() {
        var parser, result;
        parser = new MapList.Parser.ObjectParser;
        result = parser.execute(this.data.entries.object);
        return expect(result).toEqual(this.data.entries.object);
      });
    });
    describe("Entry", function() {
      beforeEach(function() {
        return this.Entry = MapList.Entry;
      });
      describe(".view", function() {
        beforeEach(function() {
          var options;
          options = new MapList.Options({
            infoTemplate: "<div>info</div>",
            listTemplate: "<div>list</div>"
          });
          return this.entry = new this.Entry({}, options);
        });
        it("info", function() {
          return expect(this.entry.view('info') instanceof google.maps.InfoWindow).toBeTruthy();
        });
        it("marker", function() {
          return expect(this.entry.view('marker') instanceof google.maps.Marker).toBeTruthy();
        });
        return it("list", function() {
          return expect(this.entry.view('list') instanceof jQuery).toBeTruthy();
        });
      });
      describe(".isExistPoint", function() {
        beforeEach(function() {
          var _ref;
          return this.MyEntry = (function(_super) {
            __extends(MyEntry, _super);

            function MyEntry() {
              _ref = MyEntry.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            MyEntry.prototype.makeInfo = function() {};

            MyEntry.prototype.makeMarker = function() {};

            MyEntry.prototype.makeList = function() {};

            return MyEntry;

          })(this.Entry);
        });
        it("true case", function() {
          var entry;
          entry = new this.MyEntry({
            lat: 35,
            lng: 135
          });
          return expect(entry.isExistPoint()).toBeTruthy();
        });
        return it("false case", function() {
          var entry;
          entry = new this.MyEntry({});
          expect(entry.isExistPoint()).toBeFalsy();
          entry = new this.MyEntry({
            lat: 0
          });
          expect(entry.isExistPoint()).toBeFalsy();
          entry = new this.MyEntry({
            lat: 35,
            lng: NaN
          });
          return expect(entry.isExistPoint()).toBeFalsy();
        });
      });
      describe(".isSelect", function() {
        var MyEntry;
        MyEntry = void 0;
        beforeEach(function() {
          var _ref;
          return MyEntry = (function(_super) {
            __extends(MyEntry, _super);

            function MyEntry() {
              _ref = MyEntry.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            MyEntry.prototype.makeInfo = function() {};

            MyEntry.prototype.makeMarker = function() {};

            MyEntry.prototype.makeList = function() {};

            return MyEntry;

          })(this.Entry);
        });
        it("have not lat & lng", function() {
          var entry;
          entry = new MyEntry;
          return expect(entry.isSelect({})).toBeFalsy();
        });
        it("properties equal {}", function() {
          var entry;
          entry = new MyEntry({
            lat: 35,
            lng: 135
          });
          return expect(entry.isSelect({})).toBeTruthy();
        });
        it("by genreId true", function() {
          var entry;
          entry = new MyEntry({
            lat: 35,
            lng: 135,
            genre: "foo"
          });
          return expect(entry.isSelect({
            genre: "foo"
          })).toBeTruthy();
        });
        return it("by genreId false", function() {
          var entry;
          entry = new MyEntry({
            lat: 35,
            lng: 135,
            genre: "foo"
          });
          return expect(entry.isSelect({
            genre: "bar"
          })).toBeFalsy();
        });
      });
      describe("triger check", function() {
        var entry;
        entry = void 0;
        beforeEach(function() {
          return entry = new Backbone.Model;
        });
        it("::openInfo", function() {
          entry.on("openinfo", function(args) {
            return expect(args).toBe(entry);
          });
          return this.Entry.prototype.openInfo.call(entry);
        });
        return it("::closeInfo", function() {
          entry.on("closeinfo", function(args) {
            return expect(args).toBe(entry);
          });
          return this.Entry.prototype.closeInfo.call(entry);
        });
      });
      return describe("constructor", function() {
        return it("instance check views", function() {
          var entry;
          entry = new this.Entry;
          return expect(entry.views instanceof MapList.EntryViews).toBeTruthy();
        });
      });
    });
    describe("EntryViews", function() {
      beforeEach(function() {
        var options;
        this.entry = new MapList.Entry({
          lat: 35,
          lng: 135,
          icon: "icon.png",
          shadow: "shadow.png"
        });
        this.entry.closeInfo = this.createSpy('closeInfo');
        this.entry.openInfo = this.createSpy('openInfo');
        options = new MapList.Options({
          infoTemplate: "<div>info</div>",
          listTemplate: "<div>list</div>"
        });
        return this.views = new MapList.EntryViews(this.entry, options);
      });
      describe(".createInfo", function() {
        beforeEach(function() {
          return this.info = this.views.createInfo();
        });
        it("instanceof InfoWindow", function() {
          return expect(this.info instanceof google.maps.InfoWindow).toBeTruthy();
        });
        it("make sure that info has content", function() {
          return expect(this.info.getContent()).toEqual("<div>info</div>");
        });
        return it("fires the closeclick event and execute @closeInfo", function() {
          google.maps.event.trigger(this.info, "closeclick");
          return expect(this.entry.closeInfo).toHaveBeenCalled();
        });
      });
      describe(".createMarker", function() {
        beforeEach(function() {
          return this.marker = this.views.createMarker();
        });
        it("instance of Marker", function() {
          return expect(this.marker instanceof google.maps.Marker).toBeTruthy();
        });
        it("position instanceof LatLng", function() {
          return expect(this.marker.getPosition() instanceof google.maps.LatLng).toBeTruthy();
        });
        it("check lat", function() {
          return expect(this.marker.getPosition().lat()).toEqual(35);
        });
        it("check lng", function() {
          return expect(this.marker.getPosition().lng()).toEqual(135);
        });
        it("check icon", function() {
          return expect(this.marker.getIcon()).toEqual("icon.png");
        });
        it("check shadow", function() {
          return expect(this.marker.getShadow()).toEqual("shadow.png");
        });
        return it("fires the click event and execute @openInfo", function() {
          google.maps.event.trigger(this.marker, "click");
          return expect(this.entry.openInfo).toHaveBeenCalled();
        });
      });
      return describe(".createList", function() {
        beforeEach(function() {
          return this.res = this.views.createList();
        });
        it("responce itstanceof jQuery", function() {
          return expect(this.res instanceof jQuery).toBeTruthy();
        });
        it("class is '__list'", function() {
          return expect(this.res.attr("class")).toEqual("__list");
        });
        return it("have entry", function() {
          return expect(this.res.data("entry")).toBe(this.entry);
        });
      });
    });
    describe("Entries", function() {
      beforeEach(function() {
        var options;
        options = new MapList.Options;
        this.entries = new MapList.Entries(this.data.entries.object, options);
        return this.prop = {
          genre: "関東"
        };
      });
      describe(".select", function() {
        it("return selected List", function() {
          var ans, res;
          res = this.entries.select(this.prop);
          ans = _(this.data.entries.object).where(this.prop);
          return expect(_(res).map(function(entry) {
            return entry.toJSON();
          })).toEqual(ans);
        });
        it("Cache selected list", function() {
          var res;
          res = this.entries.select(this.prop);
          return expect(this.entries.selectedList).toBe(res);
        });
        it("Cache propertirs", function() {
          var res;
          res = this.entries.select(this.prop);
          return expect(this.entries.properties).toBe(this.prop);
        });
        it("fires the select event", function() {
          var spy;
          spy = this.createSpy("select");
          this.entries.on("select", spy);
          this.entries.select(this.prop);
          return expect(spy).toHaveBeenCalled();
        });
        return it("fires the select event with arguments:0", function() {
          var responce, spy;
          spy = this.createSpy("select");
          this.entries.on("select", spy);
          responce = this.entries.select(this.prop);
          return expect(spy.calls[0].args[0]).toBe(responce);
        });
      });
      return describe(".unselect", function() {
        it("fires the unselect event", function() {
          var spy;
          spy = this.createSpy("unselect");
          this.entries.on("unselect", spy);
          this.entries.unselect();
          return expect(spy).toHaveBeenCalled();
        });
        return it("cache selectedList is clear", function() {
          this.entries.unselect();
          return expect(this.entries.selectedList).toEqual([]);
        });
      });
    });
    describe("HtmlFactory", function() {
      beforeEach(function() {
        return this.HtmlFactory = MapList.HtmlFactory;
      });
      describe("::create", function() {
        it("when template is undefined", function() {
          var result;
          result = this.HtmlFactory.create();
          return expect(result instanceof this.HtmlFactory.Null).toBeTruthy();
        });
        it("when templateEngine is _.template", function() {
          var result;
          result = this.HtmlFactory.create(_.template, "");
          return expect(result instanceof this.HtmlFactory.Underscore).toBeTruthy();
        });
        it("when templateEngine is $.tmpl", function() {
          var result;
          result = this.HtmlFactory.create($.tmpl, "");
          return expect(result instanceof this.HtmlFactory.Jquery).toBeTruthy();
        });
        return it("when templateEngine is other", function() {
          var result;
          result = this.HtmlFactory.create(null, "");
          return expect(result instanceof this.HtmlFactory.Null).toBeTruthy();
        });
      });
      return describe("getTemplateEngineName", function() {
        it("engine is _.template", function() {
          var result;
          result = this.HtmlFactory.getTemplateEngineName(_.template);
          return expect(result).toEqual("_.template");
        });
        it("engine is _.template", function() {
          var result;
          result = this.HtmlFactory.getTemplateEngineName($.tmpl);
          return expect(result).toEqual("$.tmpl");
        });
        return it("engine is other", function() {
          var result;
          result = this.HtmlFactory.getTemplateEngineName(null);
          return expect(result).toEqual("other");
        });
      });
    });
    describe("HtmlFactory::Null", function() {
      beforeEach(function() {
        return this.factory = new MapList.HtmlFactory.Null;
      });
      return it(".make", function() {
        var result;
        result = this.factory.make();
        return expect(result).toBeNull();
      });
    });
    describe("HtmlFactory::Underscore", function() {
      beforeEach(function() {
        var template;
        template = "<div><%- name %></div>";
        return this.factory = new MapList.HtmlFactory.Underscore(template);
      });
      return it(".make", function() {
        var result;
        result = this.factory.make({
          name: "Bob"
        });
        return expect(result).toEqual("<div>Bob</div>");
      });
    });
    describe("HtmlFactory::Jquery", function() {
      beforeEach(function() {
        var template;
        template = "<div>${name}</div>";
        return this.factory = new MapList.HtmlFactory.Jquery(template);
      });
      return it(".make", function() {
        var result;
        result = this.factory.make({
          name: "Bob"
        });
        return expect(result).toEqual("<div>Bob</div>");
      });
    });
    describe("MapView", function() {
      beforeEach(function() {
        this.options = new MapList.Options({
          infoTemplate: "<div>info</div>",
          listTemplate: "<div>list</div>"
        });
        this.mapView = new MapList.MapView(this.options);
        return this.entries = new MapList.Entries(this.data.entries.object, this.options);
      });
      afterEach(function() {
        return $("#map_canvas").children().remove();
      });
      describe("constructor", function() {
        it("instance of Backbone.View", function() {
          return expect(this.mapView instanceof Backbone.View).toBeTruthy();
        });
        return it("google maps create", function() {
          return expect(this.mapView.map instanceof google.maps.Map).toBeTruthy();
        });
      });
      describe(".build", function() {
        beforeEach(function() {
          var _this = this;
          this.setMap = this.createSpy("setMap");
          this.entries.each(function(entry) {
            return entry.view('marker').setMap = _this.setMap;
          });
          return this.mapView.fitBounds = this.createSpy("fitBounds");
        });
        it("execute entry.marker.setMap", function() {
          this.mapView.build(this.entries.models);
          return expect(this.setMap.calls.length).toEqual(this.entries.length);
        });
        it("execute entry.marker.setMap with @map", function() {
          this.mapView.build(this.entries.models);
          return expect(this.setMap.calls[0].args[0]).toBe(this.mapView.map);
        });
        it("execute @fitBounds if @options.doFit == true", function() {
          this.mapView.build(this.entries.models);
          return expect(this.mapView.fitBounds).toHaveBeenCalled();
        });
        return it("execute @fitBounds with entries", function() {
          this.mapView.build(this.entries.models);
          return expect(this.mapView.fitBounds.calls[0].args[0]).toBe(this.entries.models);
        });
      });
      describe(".clear", function() {
        beforeEach(function() {
          var _this = this;
          this.setMap = this.createSpy("setMap");
          this.entries.each(function(entry) {
            return entry.view('marker').setMap = _this.setMap;
          });
          this.mapView.closeOpenedInfo = this.createSpy("closeOpenedInfo");
          return this.mapView.clear(this.entries.models);
        });
        it("execute @closeOpenedInfo", function() {
          return expect(this.mapView.closeOpenedInfo).toHaveBeenCalled();
        });
        it("execute entry.marker.setMap", function() {
          return expect(this.setMap.calls.length).toEqual(this.entries.length);
        });
        return it("execute entry.marker.setMap with null", function() {
          return expect(this.setMap.calls[0].args[0]).toBe(null);
        });
      });
      describe(".openInfo", function() {
        beforeEach(function() {
          var _this = this;
          this.info = {
            open: this.createSpy("open")
          };
          this.marker = 'marker';
          this.entry = {
            view: function(type) {
              switch (type) {
                case "info":
                  return _this.info;
                case "marker":
                  return _this.marker;
              }
            }
          };
          return this.mapView.openInfo(this.entry);
        });
        it("execute info.open", function() {
          return expect(this.info.open).toHaveBeenCalled();
        });
        it("execute info.open with 0:@map", function() {
          return expect(this.info.open.calls[0].args[0]).toBe(this.mapView.map);
        });
        it("execute info.open with 1:marker", function() {
          return expect(this.info.open.calls[0].args[1]).toBe(this.marker);
        });
        return it("chche @openedInfo", function() {
          return expect(this.mapView.openedInfoEntry).toBe(this.entry);
        });
      });
      return describe(".closeOpenedInfo", function() {
        beforeEach(function() {
          this.close = this.createSpy("close");
          this.mapView.openedInfoEntry = new MapList.Entry({}, this.options);
          this.mapView.openedInfoEntry.view('info').close = this.close;
          return this.mapView.closeOpenedInfo();
        });
        it("execute openedInfo.close", function() {
          return expect(this.close).toHaveBeenCalled();
        });
        return it("nonchche openedInfo", function() {
          return expect(this.mapView.openedInfoEntry).toBe(null);
        });
      });
    });
    describe("ListView", function() {
      beforeEach(function() {
        this.options = new MapList.Options;
        this.ListView = MapList.ListView;
        return this.listView = new this.ListView(this.options);
      });
      describe("constructor", function() {
        it("$el is jQuey Object", function() {
          return expect(this.listView.$el instanceof jQuery).toBeTruthy();
        });
        return it("$el selector", function() {
          return expect(this.listView.$el.selector).toEqual(this.options.listSelector);
        });
      });
      describe(".build", function() {});
      describe(".clear", function() {});
      return describe(".openInfo", function() {});
    });
    return describe("GenresView", function() {
      beforeEach(function() {
        this.options = new MapList.Options;
        return this.genreView = new MapList.GenresView(this.options);
      });
      describe("constructor", function() {
        it("check @$el is jQuey object", function() {
          return expect(this.genreView.$el instanceof jQuery).toBeTruthy();
        });
        return it("check @$el.selector", function() {
          return expect(this.genreView.$el.selector).toEqual(this.options.genresSelector);
        });
      });
      return describe(".selectGenre", function() {
        describe("custom genre key", function() {
          beforeEach(function() {
            var event, target, wrap;
            wrap = $("<div id='genre'>").data(this.options.genreGroup, "group");
            target = $("<div>").data(this.options.genreDataName, "foo").appendTo(wrap);
            event = {
              currentTarget: target[0]
            };
            this.genreView.trigger = this.spy = this.createSpy("change:genre");
            return this.genreView.selectGenre(event);
          });
          it("fire change:genre event", function() {
            return expect(this.spy).toHaveBeenCalled();
          });
          it("fire change:genre event with 0:eventName", function() {
            return expect(this.spy.calls[0].args[0]).toEqual("change:genre");
          });
          it("fire change:genre event with 1:properties", function() {
            return expect(this.spy.calls[0].args[1]).toEqual("group");
          });
          return it("fire change:genre event with 2:properties", function() {
            return expect(this.spy.calls[0].args[2]).toEqual("foo");
          });
        });
        return describe("default genre key", function() {
          beforeEach(function() {
            var event, target, wrap;
            wrap = $("<div id='genre'>");
            target = $("<div>").data(this.options.genreDataName, "foo").appendTo(wrap);
            event = {
              currentTarget: target[0]
            };
            this.genreView.trigger = this.spy = this.createSpy("change:genre");
            return this.genreView.selectGenre(event);
          });
          it("fire change:genre event", function() {
            return expect(this.spy).toHaveBeenCalled();
          });
          it("fire change:genre event with 0:eventName", function() {
            return expect(this.spy.calls[0].args[0]).toEqual("change:genre");
          });
          it("fire change:genre event with 1:properties", function() {
            return expect(this.spy.calls[0].args[1]).toEqual("genre");
          });
          return it("fire change:genre event with 2:properties", function() {
            return expect(this.spy.calls[0].args[2]).toEqual("foo");
          });
        });
      });
    });
  });

}).call(this);
